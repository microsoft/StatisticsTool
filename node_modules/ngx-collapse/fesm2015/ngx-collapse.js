import { Directive, ElementRef, HostListener, Input, HostBinding, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line: directive-selector
class CollapseContentDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.nextIsOpen = null;
        this._open = false;
    }
    /**
     * @private
     * @return {?}
     */
    getHTMLEL() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getHTMLEL().classList.add('collapse');
    }
    /**
     * @return {?}
     */
    onTransitionComplete() {
        /** @type {?} */
        const element = this.getHTMLEL();
        if (this.nextIsOpen == true) {
            element.style.height = '';
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
            element.classList.add('show');
        }
        else if (this.nextIsOpen == false) {
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.nextIsOpen = false;
        this._open = false;
        /** @type {?} */
        const element = this.getHTMLEL();
        // // remove collapse show
        element.classList.remove('collapse');
        element.classList.remove('show');
        /** @type {?} */
        const height = element.offsetHeight;
        element.style.height = `${height}px`;
        element.offsetHeight;
        // // collapsing and transition
        // this.collapsing = true;
        element.classList.add('collapsing');
        element.style.height = '';
    }
    /**
     * @return {?}
     */
    show() {
        this.nextIsOpen = true;
        this._open = true;
        /** @type {?} */
        const element = this.getHTMLEL();
        // this.collapse = false;
        // this.collapsing = true;
        element.classList.remove('collapse');
        element.classList.add('collapsing');
        /** @type {?} */
        const height = element.scrollHeight;
        element.style.height = `${height}px`;
    }
    /**
     * @return {?}
     */
    toggle() {
        /** @type {?} */
        const element = this.getHTMLEL();
        element.classList.contains('show') ?
            this.hide() :
            this.show();
    }
    /**
     * @return {?}
     */
    get open() {
        return this._open || this.getHTMLEL().classList.contains('show');
    }
}
CollapseContentDirective.decorators = [
    { type: Directive, args: [{ selector: '[collapseContent]', exportAs: 'collapseContent' },] }
];
/** @nocollapse */
CollapseContentDirective.ctorParameters = () => [
    { type: ElementRef }
];
CollapseContentDirective.propDecorators = {
    onTransitionComplete: [{ type: HostListener, args: ['transitionend',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.nextIsOpen;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype._open;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-ctrl.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line: directive-selector
class CollapseCtrlDirective {
    constructor() {
        // @HostBinding('class.expand')
        this.expand = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set contentRef(v) {
        if (v instanceof CollapseContentDirective) {
            this.content = Array.of(v);
        }
        else if (Array.isArray(v)) {
            this.content = v.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c instanceof CollapseContentDirective));
        }
    }
    /**
     * @return {?}
     */
    get collapsed() {
        return !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        c => c.open));
    }
    /**
     * @return {?}
     */
    onCLick() {
        this.expand = !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        c => c.open));
        if (!this.content) {
            return;
        }
        this.content.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => c.toggle()));
    }
    /**
     * @param {?} c
     * @return {?}
     */
    hide(c) {
        c.hide();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    show(c) {
        c.show();
    }
}
CollapseCtrlDirective.decorators = [
    { type: Directive, args: [{ selector: '[collapse]' },] }
];
/** @nocollapse */
CollapseCtrlDirective.ctorParameters = () => [];
CollapseCtrlDirective.propDecorators = {
    contentRef: [{ type: Input, args: ['collapse',] }],
    collapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
    onCLick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    CollapseCtrlDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CollapseCtrlDirective.prototype.expand;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-collapse.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxCollapseModule {
}
NgxCollapseModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CollapseCtrlDirective, CollapseContentDirective],
                imports: [],
                exports: [CollapseCtrlDirective, CollapseContentDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-collapse.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CollapseContentDirective, CollapseCtrlDirective, NgxCollapseModule };
//# sourceMappingURL=ngx-collapse.js.map
