/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-ctrl.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, Input } from '@angular/core';
import { CollapseContentDirective } from './collapse-content.directive';
// tslint:disable-next-line: directive-selector
export class CollapseCtrlDirective {
    constructor() {
        // @HostBinding('class.expand')
        this.expand = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set contentRef(v) {
        if (v instanceof CollapseContentDirective) {
            this.content = Array.of(v);
        }
        else if (Array.isArray(v)) {
            this.content = v.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c instanceof CollapseContentDirective));
        }
    }
    /**
     * @return {?}
     */
    get collapsed() {
        return !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        c => c.open));
    }
    /**
     * @return {?}
     */
    onCLick() {
        this.expand = !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        c => c.open));
        if (!this.content) {
            return;
        }
        this.content.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => c.toggle()));
    }
    /**
     * @param {?} c
     * @return {?}
     */
    hide(c) {
        c.hide();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    show(c) {
        c.show();
    }
}
CollapseCtrlDirective.decorators = [
    { type: Directive, args: [{ selector: '[collapse]' },] }
];
/** @nocollapse */
CollapseCtrlDirective.ctorParameters = () => [];
CollapseCtrlDirective.propDecorators = {
    contentRef: [{ type: Input, args: ['collapse',] }],
    collapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
    onCLick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    CollapseCtrlDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CollapseCtrlDirective.prototype.expand;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UtY3RybC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sbGFwc2UvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2UtY3RybC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUdULFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUl4RSxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDOztRQWlCUSxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBakJSLENBQUM7Ozs7O0lBSWhCLElBQ1csVUFBVSxDQUNuQixDQUF3RDtRQUV4RCxJQUFJLENBQUMsWUFBWSx3QkFBd0IsRUFBRztZQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUI7YUFBTSxJQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLHdCQUF3QixFQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDOzs7O0lBTUQsSUFDSSxTQUFTO1FBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSzs7OztRQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFc0IsT0FBTztRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUMsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxDQUEyQjtRQUM5QixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDWCxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxDQUEyQjtRQUM5QixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDWCxDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTs7Ozs7eUJBTWxDLEtBQUssU0FBQyxVQUFVO3dCQWVoQixXQUFXLFNBQUMsaUJBQWlCO3NCQUs3QixZQUFZLFNBQUMsT0FBTzs7OztJQXRCckIsd0NBQW9DOzs7OztJQWVwQyx1Q0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBPbkluaXQsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgSW5wdXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9jb2xsYXBzZS1jb250ZW50LmRpcmVjdGl2ZSc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1zZWxlY3RvclxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbY29sbGFwc2VdJyB9KVxyXG5leHBvcnQgY2xhc3MgQ29sbGFwc2VDdHJsRGlyZWN0aXZlIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIGNvbnRlbnQ6IENvbGxhcHNlQ29udGVudERpcmVjdGl2ZVtdO1xyXG5cclxuICBASW5wdXQoJ2NvbGxhcHNlJylcclxuICBwdWJsaWMgc2V0IGNvbnRlbnRSZWYoXHJcbiAgICB2OiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUgfCBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmVbXVxyXG4gICkge1xyXG4gICAgaWYgKHYgaW5zdGFuY2VvZiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUgKSB7XHJcbiAgICAgIHRoaXMuY29udGVudCA9IEFycmF5Lm9mKHYpO1xyXG4gICAgfSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSh2KSkge1xyXG4gICAgICB0aGlzLmNvbnRlbnQgPSB2LmZpbHRlcihjID0+IGMgaW5zdGFuY2VvZiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIEBIb3N0QmluZGluZygnY2xhc3MuZXhwYW5kJylcclxuICBwcml2YXRlIGV4cGFuZCA9IGZhbHNlO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbGxhcHNlZCcpXHJcbiAgZ2V0IGNvbGxhcHNlZCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5jb250ZW50LmV2ZXJ5KCBjID0+IGMub3BlbiApO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBvbkNMaWNrKCkge1xyXG4gICAgdGhpcy5leHBhbmQgPSAhdGhpcy5jb250ZW50LmV2ZXJ5KGMgPT4gYy5vcGVuKTtcclxuICAgIGlmICghdGhpcy5jb250ZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbnRlbnQuZm9yRWFjaChjID0+IGMudG9nZ2xlKCkpO1xyXG4gIH1cclxuXHJcbiAgaGlkZShjOiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUpIHtcclxuICAgIGMuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgc2hvdyhjOiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUpIHtcclxuICAgIGMuc2hvdygpO1xyXG4gIH1cclxufVxyXG4iXX0=