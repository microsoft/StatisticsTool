/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
// tslint:disable-next-line: directive-selector
export class CollapseContentDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.nextIsOpen = null;
        this._open = false;
    }
    /**
     * @private
     * @return {?}
     */
    getHTMLEL() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getHTMLEL().classList.add('collapse');
    }
    /**
     * @return {?}
     */
    onTransitionComplete() {
        /** @type {?} */
        const element = this.getHTMLEL();
        if (this.nextIsOpen == true) {
            element.style.height = '';
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
            element.classList.add('show');
        }
        else if (this.nextIsOpen == false) {
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.nextIsOpen = false;
        this._open = false;
        /** @type {?} */
        const element = this.getHTMLEL();
        // // remove collapse show
        element.classList.remove('collapse');
        element.classList.remove('show');
        /** @type {?} */
        const height = element.offsetHeight;
        element.style.height = `${height}px`;
        element.offsetHeight;
        // // collapsing and transition
        // this.collapsing = true;
        element.classList.add('collapsing');
        element.style.height = '';
    }
    /**
     * @return {?}
     */
    show() {
        this.nextIsOpen = true;
        this._open = true;
        /** @type {?} */
        const element = this.getHTMLEL();
        // this.collapse = false;
        // this.collapsing = true;
        element.classList.remove('collapse');
        element.classList.add('collapsing');
        /** @type {?} */
        const height = element.scrollHeight;
        element.style.height = `${height}px`;
    }
    /**
     * @return {?}
     */
    toggle() {
        /** @type {?} */
        const element = this.getHTMLEL();
        element.classList.contains('show') ?
            this.hide() :
            this.show();
    }
    /**
     * @return {?}
     */
    get open() {
        return this._open || this.getHTMLEL().classList.contains('show');
    }
}
CollapseContentDirective.decorators = [
    { type: Directive, args: [{ selector: '[collapseContent]', exportAs: 'collapseContent' },] }
];
/** @nocollapse */
CollapseContentDirective.ctorParameters = () => [
    { type: ElementRef }
];
CollapseContentDirective.propDecorators = {
    onTransitionComplete: [{ type: HostListener, args: ['transitionend',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.nextIsOpen;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype._open;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UtY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sbGFwc2UvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2UtY29udGVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFVBQVUsRUFFVixZQUFZLEVBR2IsTUFBTSxlQUFlLENBQUM7O0FBSXZCLE1BQU0sT0FBTyx3QkFBd0I7Ozs7SUFVbkMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVRsQyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBRWxCLFVBQUssR0FBRyxLQUFLLENBQUM7SUFPdUIsQ0FBQzs7Ozs7SUFMdEMsU0FBUztRQUNmLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7SUFDdkMsQ0FBQzs7OztJQU1ELFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBR0Qsb0JBQW9COztjQUNaLE9BQU8sR0FBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUM3QyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUMxQiwyQkFBMkI7WUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsd0JBQXdCO1lBQ3hCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssRUFBRTtZQUNuQywyQkFBMkI7WUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsd0JBQXdCO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7Y0FDYixPQUFPLEdBQWdCLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFFN0MsMEJBQTBCO1FBQzFCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUUzQixNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVk7UUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQztRQUNyQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBRXJCLCtCQUErQjtRQUMvQiwwQkFBMEI7UUFDMUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7O2NBRVosT0FBTyxHQUFnQixJQUFJLENBQUMsU0FBUyxFQUFFO1FBRTdDLHlCQUF5QjtRQUN6QiwwQkFBMEI7UUFDMUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7O2NBRTlCLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWTtRQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxNQUFNOztjQUNFLE9BQU8sR0FBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUM3QyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ2IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFFO0lBQ2pCLENBQUM7Ozs7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7Ozs7WUFSdkUsVUFBVTs7O21DQTBCVCxZQUFZLFNBQUMsZUFBZTs7Ozs7OztJQWhCN0IsOENBQTBCOzs7OztJQUUxQix5Q0FBc0I7Ozs7O0lBT1YsOENBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgT25Jbml0LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0LFxyXG4gIFRlbXBsYXRlUmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1zZWxlY3RvclxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbY29sbGFwc2VDb250ZW50XScsIGV4cG9ydEFzOiAnY29sbGFwc2VDb250ZW50JyB9KVxyXG5leHBvcnQgY2xhc3MgQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICBwcml2YXRlIG5leHRJc09wZW4gPSBudWxsO1xyXG5cclxuICBwcml2YXRlIF9vcGVuID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgZ2V0SFRNTEVMKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XHJcblxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuZ2V0SFRNTEVMKCkuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2UnKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnKVxyXG4gIG9uVHJhbnNpdGlvbkNvbXBsZXRlKCkge1xyXG4gICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEhUTUxFTCgpO1xyXG4gICAgaWYgKHRoaXMubmV4dElzT3BlbiA9PSB0cnVlKSB7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgIC8vIHRoaXMuY29sbGFwc2luZyA9IGZhbHNlO1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNpbmcnKTtcclxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xyXG4gICAgICAvLyB0aGlzLmNvbGxhcHNlID0gdHJ1ZTtcclxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubmV4dElzT3BlbiA9PSBmYWxzZSkge1xyXG4gICAgICAvLyB0aGlzLmNvbGxhcHNpbmcgPSBmYWxzZTtcclxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjb2xsYXBzaW5nJyk7XHJcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2UnKTtcclxuICAgICAgLy8gdGhpcy5jb2xsYXBzZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy5uZXh0SXNPcGVuID0gZmFsc2U7XHJcbiAgICB0aGlzLl9vcGVuID0gZmFsc2U7XHJcbiAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0SFRNTEVMKCk7XHJcblxyXG4gICAgLy8gLy8gcmVtb3ZlIGNvbGxhcHNlIHNob3dcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2UnKTtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG5cclxuICAgIGNvbnN0IGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG4gICAgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgLy8gLy8gY29sbGFwc2luZyBhbmQgdHJhbnNpdGlvblxyXG4gICAgLy8gdGhpcy5jb2xsYXBzaW5nID0gdHJ1ZTtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2luZycpO1xyXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnJztcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICB0aGlzLm5leHRJc09wZW4gPSB0cnVlO1xyXG4gICAgdGhpcy5fb3BlbiA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEhUTUxFTCgpO1xyXG5cclxuICAgIC8vIHRoaXMuY29sbGFwc2UgPSBmYWxzZTtcclxuICAgIC8vIHRoaXMuY29sbGFwc2luZyA9IHRydWU7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlJyk7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNpbmcnKTtcclxuXHJcbiAgICBjb25zdCBoZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcclxuICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcclxuICB9XHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRIVE1MRUwoKTtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93JykgP1xyXG4gICAgICB0aGlzLmhpZGUoKSA6XHJcbiAgICAgIHRoaXMuc2hvdygpIDtcclxuICB9XHJcblxyXG4gIGdldCBvcGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX29wZW4gfHwgdGhpcy5nZXRIVE1MRUwoKS5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKTtcclxuICB9XHJcbn1cclxuIl19