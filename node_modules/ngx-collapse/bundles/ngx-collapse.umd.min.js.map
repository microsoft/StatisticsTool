{"version":3,"sources":["ng://ngx-collapse/lib/collapse-content.directive.ts","ng://ngx-collapse/lib/collapse-ctrl.directive.ts","ng://ngx-collapse/lib/ngx-collapse.module.ts"],"names":["CollapseContentDirective","elementRef","this","nextIsOpen","_open","prototype","getHTMLEL","nativeElement","ngOnInit","classList","add","onTransitionComplete","element","style","height","remove","hide","offsetHeight","show","scrollHeight","toggle","contains","Object","defineProperty","Directive","args","selector","exportAs","ElementRef","HostListener","CollapseCtrlDirective","expand","v","content","Array","of","isArray","filter","c","every","open","onCLick","forEach","Input","HostBinding","NgxCollapseModule","NgModule","declarations","imports","exports"],"mappings":"iRAWA,IAAAA,EAAA,WAWE,SAAAA,EAAoBC,GAAAC,KAAAD,WAAAA,EATZC,KAAAC,WAAa,KAEbD,KAAAE,OAAQ,EA4ElB,OA1EUJ,EAAAK,UAAAC,UAAR,WACE,OAAOJ,KAAKD,WAAWM,eAOzBP,EAAAK,UAAAG,SAAA,WACEN,KAAKI,YAAYG,UAAUC,IAAI,aAIjCV,EAAAK,UAAAM,qBADA,eAEQC,EAAuBV,KAAKI,YACX,GAAnBJ,KAAKC,YACPS,EAAQC,MAAMC,OAAS,GAEvBF,EAAQH,UAAUM,OAAO,cACzBH,EAAQH,UAAUC,IAAI,YAEtBE,EAAQH,UAAUC,IAAI,SACM,GAAnBR,KAAKC,aAEdS,EAAQH,UAAUM,OAAO,cACzBH,EAAQH,UAAUC,IAAI,cAK1BV,EAAAK,UAAAW,KAAA,WACEd,KAAKC,YAAa,EAClBD,KAAKE,OAAQ,MACPQ,EAAuBV,KAAKI,YAGlCM,EAAQH,UAAUM,OAAO,YACzBH,EAAQH,UAAUM,OAAO,YAEnBD,EAASF,EAAQK,aACvBL,EAAQC,MAAMC,OAAYA,EAAM,KAChCF,EAAQK,aAIRL,EAAQH,UAAUC,IAAI,cACtBE,EAAQC,MAAMC,OAAS,IAGzBd,EAAAK,UAAAa,KAAA,WACEhB,KAAKC,YAAa,EAClBD,KAAKE,OAAQ,MAEPQ,EAAuBV,KAAKI,YAIlCM,EAAQH,UAAUM,OAAO,YACzBH,EAAQH,UAAUC,IAAI,kBAEhBI,EAASF,EAAQO,aACvBP,EAAQC,MAAMC,OAAYA,EAAM,MAGlCd,EAAAK,UAAAe,OAAA,WAC+BlB,KAAKI,YAC1BG,UAAUY,SAAS,QACzBnB,KAAKc,OACLd,KAAKgB,QAGTI,OAAAC,eAAIvB,EAAAK,UAAA,OAAI,KAAR,WACE,OAAOH,KAAKE,OAASF,KAAKI,YAAYG,UAAUY,SAAS,6DA9E5DG,EAAAA,UAASC,KAAA,CAAC,CAAEC,SAAU,oBAAqBC,SAAU,+DARpDC,EAAAA,4DA0BCC,EAAAA,aAAYJ,KAAA,CAAC,oBA8DhBzB,EAhFA,GCAA,IAAA8B,EAAA,WAEE,SAAAA,IAiBQ5B,KAAA6B,QAAS,EAuBnB,OApCET,OAAAC,eACWO,EAAAzB,UAAA,aAAU,KADrB,SAEE2B,GAEIA,aAAahC,EACfE,KAAK+B,QAAUC,MAAMC,GAAGH,GACdE,MAAME,QAAQJ,KACxB9B,KAAK+B,QAAUD,EAAEK,QAAM,SAACC,GAAK,OAAAA,aAAatC,uCAQ9CsB,OAAAC,eACIO,EAAAzB,UAAA,YAAS,KADb,WAEE,OAAQH,KAAK+B,QAAQM,OAAK,SAAED,GAAK,OAAAA,EAAEE,yCAGdV,EAAAzB,UAAAoC,QAAvB,WACEvC,KAAK6B,QAAU7B,KAAK+B,QAAQM,OAAK,SAACD,GAAK,OAAAA,EAAEE,QACpCtC,KAAK+B,SAIV/B,KAAK+B,QAAQS,SAAO,SAACJ,GAAK,OAAAA,EAAElB,aAG9BU,EAAAzB,UAAAW,KAAA,SAAKsB,GACHA,EAAEtB,QAGJc,EAAAzB,UAAAa,KAAA,SAAKoB,GACHA,EAAEpB,4BAxCLM,EAAAA,UAASC,KAAA,CAAC,CAAEC,SAAU,2FAMpBiB,EAAAA,MAAKlB,KAAA,CAAC,+BAeNmB,EAAAA,YAAWnB,KAAA,CAAC,oCAKZI,EAAAA,aAAYJ,KAAA,CAAC,YAgBhBK,EA1CA,GCXA,IAAAe,EAAA,WAMA,SAAAA,KAMiC,2BANhCC,EAAAA,SAAQrB,KAAA,CAAC,CACRsB,aAAc,CAAEjB,EAAuB9B,GACvCgD,QAAS,GAETC,QAAS,CAAEnB,EAAuB9B,OAEH6C,EAZjC","sourcesContent":["import {\r\n  Directive,\r\n  OnInit,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  TemplateRef\r\n} from '@angular/core';\r\n\r\n// tslint:disable-next-line: directive-selector\r\n@Directive({ selector: '[collapseContent]', exportAs: 'collapseContent' })\r\nexport class CollapseContentDirective implements OnInit {\r\n  private nextIsOpen = null;\r\n\r\n  private _open = false;\r\n\r\n  private getHTMLEL(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.getHTMLEL().classList.add('collapse');\r\n  }\r\n\r\n  @HostListener('transitionend')\r\n  onTransitionComplete() {\r\n    const element: HTMLElement = this.getHTMLEL();\r\n    if (this.nextIsOpen == true) {\r\n      element.style.height = '';\r\n      // this.collapsing = false;\r\n      element.classList.remove('collapsing');\r\n      element.classList.add('collapse');\r\n      // this.collapse = true;\r\n      element.classList.add('show');\r\n    } else if (this.nextIsOpen == false) {\r\n      // this.collapsing = false;\r\n      element.classList.remove('collapsing');\r\n      element.classList.add('collapse');\r\n      // this.collapse = true;\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    this.nextIsOpen = false;\r\n    this._open = false;\r\n    const element: HTMLElement = this.getHTMLEL();\r\n\r\n    // // remove collapse show\r\n    element.classList.remove('collapse');\r\n    element.classList.remove('show');\r\n\r\n    const height = element.offsetHeight;\r\n    element.style.height = `${height}px`;\r\n    element.offsetHeight;\r\n\r\n    // // collapsing and transition\r\n    // this.collapsing = true;\r\n    element.classList.add('collapsing');\r\n    element.style.height = '';\r\n  }\r\n\r\n  show() {\r\n    this.nextIsOpen = true;\r\n    this._open = true;\r\n\r\n    const element: HTMLElement = this.getHTMLEL();\r\n\r\n    // this.collapse = false;\r\n    // this.collapsing = true;\r\n    element.classList.remove('collapse');\r\n    element.classList.add('collapsing');\r\n\r\n    const height = element.scrollHeight;\r\n    element.style.height = `${height}px`;\r\n  }\r\n\r\n  toggle() {\r\n    const element: HTMLElement = this.getHTMLEL();\r\n    element.classList.contains('show') ?\r\n      this.hide() :\r\n      this.show() ;\r\n  }\r\n\r\n  get open() {\r\n    return this._open || this.getHTMLEL().classList.contains('show');\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  OnInit,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input\r\n} from '@angular/core';\r\nimport { CollapseContentDirective } from './collapse-content.directive';\r\n\r\n// tslint:disable-next-line: directive-selector\r\n@Directive({ selector: '[collapse]' })\r\nexport class CollapseCtrlDirective {\r\n  constructor() {}\r\n\r\n  content: CollapseContentDirective[];\r\n\r\n  @Input('collapse')\r\n  public set contentRef(\r\n    v: CollapseContentDirective | CollapseContentDirective[]\r\n  ) {\r\n    if (v instanceof CollapseContentDirective ) {\r\n      this.content = Array.of(v);\r\n    } else if ( Array.isArray(v)) {\r\n      this.content = v.filter(c => c instanceof CollapseContentDirective);\r\n    }\r\n  }\r\n\r\n\r\n  // @HostBinding('class.expand')\r\n  private expand = false;\r\n\r\n  @HostBinding('class.collapsed')\r\n  get collapsed() {\r\n    return !this.content.every( c => c.open );\r\n  }\r\n\r\n  @HostListener('click') onCLick() {\r\n    this.expand = !this.content.every(c => c.open);\r\n    if (!this.content) {\r\n      return;\r\n    }\r\n\r\n    this.content.forEach(c => c.toggle());\r\n  }\r\n\r\n  hide(c: CollapseContentDirective) {\r\n    c.hide();\r\n  }\r\n\r\n  show(c: CollapseContentDirective) {\r\n    c.show();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CollapseContentDirective } from './collapse-content.directive';\nimport { CollapseCtrlDirective } from './collapse-ctrl.directive';\n\n\n\n@NgModule({\n  declarations: [ CollapseCtrlDirective, CollapseContentDirective],\n  imports: [\n  ],\n  exports: [ CollapseCtrlDirective, CollapseContentDirective]\n})\nexport class NgxCollapseModule { }\n"]}