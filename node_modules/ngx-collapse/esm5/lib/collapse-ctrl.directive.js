/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-ctrl.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, Input } from '@angular/core';
import { CollapseContentDirective } from './collapse-content.directive';
// tslint:disable-next-line: directive-selector
var CollapseCtrlDirective = /** @class */ (function () {
    function CollapseCtrlDirective() {
        // @HostBinding('class.expand')
        this.expand = false;
    }
    Object.defineProperty(CollapseCtrlDirective.prototype, "contentRef", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v instanceof CollapseContentDirective) {
                this.content = Array.of(v);
            }
            else if (Array.isArray(v)) {
                this.content = v.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c instanceof CollapseContentDirective; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CollapseCtrlDirective.prototype, "collapsed", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.content.every((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.open; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CollapseCtrlDirective.prototype.onCLick = /**
     * @return {?}
     */
    function () {
        this.expand = !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.open; }));
        if (!this.content) {
            return;
        }
        this.content.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.toggle(); }));
    };
    /**
     * @param {?} c
     * @return {?}
     */
    CollapseCtrlDirective.prototype.hide = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        c.hide();
    };
    /**
     * @param {?} c
     * @return {?}
     */
    CollapseCtrlDirective.prototype.show = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        c.show();
    };
    CollapseCtrlDirective.decorators = [
        { type: Directive, args: [{ selector: '[collapse]' },] }
    ];
    /** @nocollapse */
    CollapseCtrlDirective.ctorParameters = function () { return []; };
    CollapseCtrlDirective.propDecorators = {
        contentRef: [{ type: Input, args: ['collapse',] }],
        collapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
        onCLick: [{ type: HostListener, args: ['click',] }]
    };
    return CollapseCtrlDirective;
}());
export { CollapseCtrlDirective };
if (false) {
    /** @type {?} */
    CollapseCtrlDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CollapseCtrlDirective.prototype.expand;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UtY3RybC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sbGFwc2UvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2UtY3RybC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUdULFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUd4RTtJQUVFOztRQWlCUSxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBakJSLENBQUM7SUFJaEIsc0JBQ1csNkNBQVU7Ozs7O1FBRHJCLFVBRUUsQ0FBd0Q7WUFFeEQsSUFBSSxDQUFDLFlBQVksd0JBQXdCLEVBQUc7Z0JBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtpQkFBTSxJQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7Z0JBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLFlBQVksd0JBQXdCLEVBQXJDLENBQXFDLEVBQUMsQ0FBQzthQUNyRTtRQUNILENBQUM7OztPQUFBO0lBTUQsc0JBQ0ksNENBQVM7Ozs7UUFEYjtZQUVFLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7Ozs7WUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxFQUFFLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7Ozs7SUFFc0IsdUNBQU87OztJQUE5QjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxFQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQVYsQ0FBVSxFQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCxvQ0FBSTs7OztJQUFKLFVBQUssQ0FBMkI7UUFDOUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQzs7Ozs7SUFFRCxvQ0FBSTs7OztJQUFKLFVBQUssQ0FBMkI7UUFDOUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQzs7Z0JBekNGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUU7Ozs7OzZCQU1sQyxLQUFLLFNBQUMsVUFBVTs0QkFlaEIsV0FBVyxTQUFDLGlCQUFpQjswQkFLN0IsWUFBWSxTQUFDLE9BQU87O0lBZ0J2Qiw0QkFBQztDQUFBLEFBMUNELElBMENDO1NBekNZLHFCQUFxQjs7O0lBR2hDLHdDQUFvQzs7Ozs7SUFlcEMsdUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgT25Jbml0LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIElucHV0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbGxhcHNlQ29udGVudERpcmVjdGl2ZSB9IGZyb20gJy4vY29sbGFwc2UtY29udGVudC5kaXJlY3RpdmUnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2NvbGxhcHNlXScgfSlcclxuZXhwb3J0IGNsYXNzIENvbGxhcHNlQ3RybERpcmVjdGl2ZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBjb250ZW50OiBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmVbXTtcclxuXHJcbiAgQElucHV0KCdjb2xsYXBzZScpXHJcbiAgcHVibGljIHNldCBjb250ZW50UmVmKFxyXG4gICAgdjogQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlIHwgQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlW11cclxuICApIHtcclxuICAgIGlmICh2IGluc3RhbmNlb2YgQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlICkge1xyXG4gICAgICB0aGlzLmNvbnRlbnQgPSBBcnJheS5vZih2KTtcclxuICAgIH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkodikpIHtcclxuICAgICAgdGhpcy5jb250ZW50ID0gdi5maWx0ZXIoYyA9PiBjIGluc3RhbmNlb2YgQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvLyBASG9zdEJpbmRpbmcoJ2NsYXNzLmV4cGFuZCcpXHJcbiAgcHJpdmF0ZSBleHBhbmQgPSBmYWxzZTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2xsYXBzZWQnKVxyXG4gIGdldCBjb2xsYXBzZWQoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuY29udGVudC5ldmVyeSggYyA9PiBjLm9wZW4gKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25DTGljaygpIHtcclxuICAgIHRoaXMuZXhwYW5kID0gIXRoaXMuY29udGVudC5ldmVyeShjID0+IGMub3Blbik7XHJcbiAgICBpZiAoIXRoaXMuY29udGVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb250ZW50LmZvckVhY2goYyA9PiBjLnRvZ2dsZSgpKTtcclxuICB9XHJcblxyXG4gIGhpZGUoYzogQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlKSB7XHJcbiAgICBjLmhpZGUoKTtcclxuICB9XHJcblxyXG4gIHNob3coYzogQ29sbGFwc2VDb250ZW50RGlyZWN0aXZlKSB7XHJcbiAgICBjLnNob3coKTtcclxuICB9XHJcbn1cclxuIl19