/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
// tslint:disable-next-line: directive-selector
var CollapseContentDirective = /** @class */ (function () {
    function CollapseContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.nextIsOpen = null;
        this._open = false;
    }
    /**
     * @private
     * @return {?}
     */
    CollapseContentDirective.prototype.getHTMLEL = /**
     * @private
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getHTMLEL().classList.add('collapse');
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.onTransitionComplete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.getHTMLEL();
        if (this.nextIsOpen == true) {
            element.style.height = '';
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
            element.classList.add('show');
        }
        else if (this.nextIsOpen == false) {
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
        }
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.nextIsOpen = false;
        this._open = false;
        /** @type {?} */
        var element = this.getHTMLEL();
        // // remove collapse show
        element.classList.remove('collapse');
        element.classList.remove('show');
        /** @type {?} */
        var height = element.offsetHeight;
        element.style.height = height + "px";
        element.offsetHeight;
        // // collapsing and transition
        // this.collapsing = true;
        element.classList.add('collapsing');
        element.style.height = '';
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        this.nextIsOpen = true;
        this._open = true;
        /** @type {?} */
        var element = this.getHTMLEL();
        // this.collapse = false;
        // this.collapsing = true;
        element.classList.remove('collapse');
        element.classList.add('collapsing');
        /** @type {?} */
        var height = element.scrollHeight;
        element.style.height = height + "px";
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.getHTMLEL();
        element.classList.contains('show') ?
            this.hide() :
            this.show();
    };
    Object.defineProperty(CollapseContentDirective.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open || this.getHTMLEL().classList.contains('show');
        },
        enumerable: true,
        configurable: true
    });
    CollapseContentDirective.decorators = [
        { type: Directive, args: [{ selector: '[collapseContent]', exportAs: 'collapseContent' },] }
    ];
    /** @nocollapse */
    CollapseContentDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CollapseContentDirective.propDecorators = {
        onTransitionComplete: [{ type: HostListener, args: ['transitionend',] }]
    };
    return CollapseContentDirective;
}());
export { CollapseContentDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.nextIsOpen;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype._open;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UtY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sbGFwc2UvIiwic291cmNlcyI6WyJsaWIvY29sbGFwc2UtY29udGVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFVBQVUsRUFFVixZQUFZLEVBR2IsTUFBTSxlQUFlLENBQUM7O0FBR3ZCO0lBV0Usa0NBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFUbEMsZUFBVSxHQUFHLElBQUksQ0FBQztRQUVsQixVQUFLLEdBQUcsS0FBSyxDQUFDO0lBT3VCLENBQUM7Ozs7O0lBTHRDLDRDQUFTOzs7O0lBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUN2QyxDQUFDOzs7O0lBTUQsMkNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7OztJQUdELHVEQUFvQjs7O0lBRHBCOztZQUVRLE9BQU8sR0FBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUM3QyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUMxQiwyQkFBMkI7WUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsd0JBQXdCO1lBQ3hCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssRUFBRTtZQUNuQywyQkFBMkI7WUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsd0JBQXdCO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELHVDQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDOztZQUNiLE9BQU8sR0FBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUU3QywwQkFBMEI7UUFDMUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7O1lBRTNCLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWTtRQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBTSxNQUFNLE9BQUksQ0FBQztRQUNyQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBRXJCLCtCQUErQjtRQUMvQiwwQkFBMEI7UUFDMUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCx1Q0FBSTs7O0lBQUo7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQzs7WUFFWixPQUFPLEdBQWdCLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFFN0MseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7WUFFOUIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZO1FBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFNLE1BQU0sT0FBSSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCx5Q0FBTTs7O0lBQU47O1lBQ1EsT0FBTyxHQUFnQixJQUFJLENBQUMsU0FBUyxFQUFFO1FBQzdDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUU7SUFDakIsQ0FBQztJQUVELHNCQUFJLDBDQUFJOzs7O1FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkUsQ0FBQzs7O09BQUE7O2dCQS9FRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFOzs7O2dCQVJ2RSxVQUFVOzs7dUNBMEJULFlBQVksU0FBQyxlQUFlOztJQThEL0IsK0JBQUM7Q0FBQSxBQWhGRCxJQWdGQztTQS9FWSx3QkFBd0I7Ozs7OztJQUNuQyw4Q0FBMEI7Ozs7O0lBRTFCLHlDQUFzQjs7Ozs7SUFPViw4Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBPbkluaXQsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgSW5wdXQsXHJcbiAgVGVtcGxhdGVSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGlyZWN0aXZlLXNlbGVjdG9yXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjb2xsYXBzZUNvbnRlbnRdJywgZXhwb3J0QXM6ICdjb2xsYXBzZUNvbnRlbnQnIH0pXHJcbmV4cG9ydCBjbGFzcyBDb2xsYXBzZUNvbnRlbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIHByaXZhdGUgbmV4dElzT3BlbiA9IG51bGw7XHJcblxyXG4gIHByaXZhdGUgX29wZW4gPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBnZXRIVE1MRUwoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cclxuXHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5nZXRIVE1MRUwoKS5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcpXHJcbiAgb25UcmFuc2l0aW9uQ29tcGxldGUoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0SFRNTEVMKCk7XHJcbiAgICBpZiAodGhpcy5uZXh0SXNPcGVuID09IHRydWUpIHtcclxuICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgLy8gdGhpcy5jb2xsYXBzaW5nID0gZmFsc2U7XHJcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2luZycpO1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNlJyk7XHJcbiAgICAgIC8vIHRoaXMuY29sbGFwc2UgPSB0cnVlO1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5uZXh0SXNPcGVuID09IGZhbHNlKSB7XHJcbiAgICAgIC8vIHRoaXMuY29sbGFwc2luZyA9IGZhbHNlO1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNpbmcnKTtcclxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xyXG4gICAgICAvLyB0aGlzLmNvbGxhcHNlID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICB0aGlzLm5leHRJc09wZW4gPSBmYWxzZTtcclxuICAgIHRoaXMuX29wZW4gPSBmYWxzZTtcclxuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRIVE1MRUwoKTtcclxuXHJcbiAgICAvLyAvLyByZW1vdmUgY29sbGFwc2Ugc2hvd1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjb2xsYXBzZScpO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcblxyXG4gICAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XHJcbiAgICBlbGVtZW50Lm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAvLyAvLyBjb2xsYXBzaW5nIGFuZCB0cmFuc2l0aW9uXHJcbiAgICAvLyB0aGlzLmNvbGxhcHNpbmcgPSB0cnVlO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzaW5nJyk7XHJcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHRoaXMubmV4dElzT3BlbiA9IHRydWU7XHJcbiAgICB0aGlzLl9vcGVuID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0SFRNTEVMKCk7XHJcblxyXG4gICAgLy8gdGhpcy5jb2xsYXBzZSA9IGZhbHNlO1xyXG4gICAgLy8gdGhpcy5jb2xsYXBzaW5nID0gdHJ1ZTtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2UnKTtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2luZycpO1xyXG5cclxuICAgIGNvbnN0IGhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlKCkge1xyXG4gICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEhUTUxFTCgpO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSA/XHJcbiAgICAgIHRoaXMuaGlkZSgpIDpcclxuICAgICAgdGhpcy5zaG93KCkgO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG9wZW4oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fb3BlbiB8fCB0aGlzLmdldEhUTUxFTCgpLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpO1xyXG4gIH1cclxufVxyXG4iXX0=