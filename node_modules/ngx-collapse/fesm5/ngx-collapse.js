import { Directive, ElementRef, HostListener, Input, HostBinding, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line: directive-selector
var CollapseContentDirective = /** @class */ (function () {
    function CollapseContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.nextIsOpen = null;
        this._open = false;
    }
    /**
     * @private
     * @return {?}
     */
    CollapseContentDirective.prototype.getHTMLEL = /**
     * @private
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getHTMLEL().classList.add('collapse');
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.onTransitionComplete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.getHTMLEL();
        if (this.nextIsOpen == true) {
            element.style.height = '';
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
            element.classList.add('show');
        }
        else if (this.nextIsOpen == false) {
            // this.collapsing = false;
            element.classList.remove('collapsing');
            element.classList.add('collapse');
            // this.collapse = true;
        }
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.nextIsOpen = false;
        this._open = false;
        /** @type {?} */
        var element = this.getHTMLEL();
        // // remove collapse show
        element.classList.remove('collapse');
        element.classList.remove('show');
        /** @type {?} */
        var height = element.offsetHeight;
        element.style.height = height + "px";
        element.offsetHeight;
        // // collapsing and transition
        // this.collapsing = true;
        element.classList.add('collapsing');
        element.style.height = '';
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        this.nextIsOpen = true;
        this._open = true;
        /** @type {?} */
        var element = this.getHTMLEL();
        // this.collapse = false;
        // this.collapsing = true;
        element.classList.remove('collapse');
        element.classList.add('collapsing');
        /** @type {?} */
        var height = element.scrollHeight;
        element.style.height = height + "px";
    };
    /**
     * @return {?}
     */
    CollapseContentDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.getHTMLEL();
        element.classList.contains('show') ?
            this.hide() :
            this.show();
    };
    Object.defineProperty(CollapseContentDirective.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open || this.getHTMLEL().classList.contains('show');
        },
        enumerable: true,
        configurable: true
    });
    CollapseContentDirective.decorators = [
        { type: Directive, args: [{ selector: '[collapseContent]', exportAs: 'collapseContent' },] }
    ];
    /** @nocollapse */
    CollapseContentDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CollapseContentDirective.propDecorators = {
        onTransitionComplete: [{ type: HostListener, args: ['transitionend',] }]
    };
    return CollapseContentDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.nextIsOpen;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype._open;
    /**
     * @type {?}
     * @private
     */
    CollapseContentDirective.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapse-ctrl.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line: directive-selector
var CollapseCtrlDirective = /** @class */ (function () {
    function CollapseCtrlDirective() {
        // @HostBinding('class.expand')
        this.expand = false;
    }
    Object.defineProperty(CollapseCtrlDirective.prototype, "contentRef", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v instanceof CollapseContentDirective) {
                this.content = Array.of(v);
            }
            else if (Array.isArray(v)) {
                this.content = v.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c instanceof CollapseContentDirective; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CollapseCtrlDirective.prototype, "collapsed", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.content.every((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.open; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CollapseCtrlDirective.prototype.onCLick = /**
     * @return {?}
     */
    function () {
        this.expand = !this.content.every((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.open; }));
        if (!this.content) {
            return;
        }
        this.content.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.toggle(); }));
    };
    /**
     * @param {?} c
     * @return {?}
     */
    CollapseCtrlDirective.prototype.hide = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        c.hide();
    };
    /**
     * @param {?} c
     * @return {?}
     */
    CollapseCtrlDirective.prototype.show = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        c.show();
    };
    CollapseCtrlDirective.decorators = [
        { type: Directive, args: [{ selector: '[collapse]' },] }
    ];
    /** @nocollapse */
    CollapseCtrlDirective.ctorParameters = function () { return []; };
    CollapseCtrlDirective.propDecorators = {
        contentRef: [{ type: Input, args: ['collapse',] }],
        collapsed: [{ type: HostBinding, args: ['class.collapsed',] }],
        onCLick: [{ type: HostListener, args: ['click',] }]
    };
    return CollapseCtrlDirective;
}());
if (false) {
    /** @type {?} */
    CollapseCtrlDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CollapseCtrlDirective.prototype.expand;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-collapse.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxCollapseModule = /** @class */ (function () {
    function NgxCollapseModule() {
    }
    NgxCollapseModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CollapseCtrlDirective, CollapseContentDirective],
                    imports: [],
                    exports: [CollapseCtrlDirective, CollapseContentDirective]
                },] }
    ];
    return NgxCollapseModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-collapse.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CollapseContentDirective, CollapseCtrlDirective, NgxCollapseModule };
//# sourceMappingURL=ngx-collapse.js.map
