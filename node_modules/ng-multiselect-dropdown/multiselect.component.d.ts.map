{"version":3,"file":"multiselect.component.d.ts","sources":["multiselect.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nimport { ListItem, IDropdownSettings } from \"./multiselect.model\";\nimport { ListFilterPipe } from \"./list-filter.pipe\";\nexport declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;\nexport declare class MultiSelectComponent implements ControlValueAccessor {\n    private listFilterPipe;\n    private cdr;\n    _settings: IDropdownSettings;\n    _data: Array<ListItem>;\n    selectedItems: Array<ListItem>;\n    isDropdownOpen: boolean;\n    _placeholder: string;\n    private _sourceDataType;\n    private _sourceDataFields;\n    filter: ListItem;\n    defaultSettings: IDropdownSettings;\n    placeholder: string;\n    disabled: boolean;\n    settings: IDropdownSettings;\n    data: Array<any>;\n    onFilterChange: EventEmitter<ListItem>;\n    onDropDownClose: EventEmitter<ListItem>;\n    onSelect: EventEmitter<ListItem>;\n    onDeSelect: EventEmitter<ListItem>;\n    onSelectAll: EventEmitter<Array<ListItem>>;\n    onDeSelectAll: EventEmitter<Array<ListItem>>;\n    private onTouchedCallback;\n    private onChangeCallback;\n    onFilterTextChange($event: any): void;\n    constructor(listFilterPipe: ListFilterPipe, cdr: ChangeDetectorRef);\n    onItemClick($event: any, item: ListItem): boolean;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    onTouched(): void;\n    trackByFn(index: any, item: any): any;\n    isSelected(clickedItem: ListItem): boolean;\n    isLimitSelectionReached(): boolean;\n    isAllItemsSelected(): boolean;\n    showButton(): boolean;\n    itemShowRemaining(): number;\n    addSelected(item: ListItem): void;\n    removeSelected(itemSel: ListItem): void;\n    emittedValue(val: any): any;\n    objectify(val: ListItem): {};\n    private deobjectify;\n    toggleDropdown(evt: any): void;\n    closeDropdown(): void;\n    toggleSelectAll(): boolean;\n    getFields(inputData: any): any[];\n}\n"]}